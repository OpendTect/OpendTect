<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-gb" lang="en-gb" dir="ltr" >
<!--
  - CopyRight:	(C) dGB Earth Sciences
  - Author:	A.H. Bril
  - Date:	Oct 2003
  - Contents:	Plugins
  - RCS:	$Id$
 -->
		
	<head>
		<title>Attributes [OpendTect Programmer's manual V@OpendTect_VERSION_MAJOR@.@OpendTect_VERSION_MINOR@]</title>
  <base href="attributes.html" />
    <link rel="stylesheet" href="style.css" type="text/css" />
  </head>

<body id="page_bg" class="width_fmax">
		
<div id="all">
        <div id="wrapper">
                <div id="wrapper_r">
<div id="header">
                                <div id="header_l">
                                
                                        <div id="header_r">
						<a href="http://www.opendtect.org" title="OpendTect - Open Source Seismic Interpretation System" alt="OpendTect - Open Source Seismic Interpretation System" id="dGB46"><div id="topbanner"></a></div>
						<div id="topmenu">
						</div>
			<div id="leftcolumn">	
						<table id="greenborder"><tbody>
								<tr><td valign="top">
<center>
<h1>OpendTect attributes</h1>
  <a href=#intro>Intro</a>
  | <a href=#attribprov>Attrib provider</a>
  | <a href=#uiattrdesced>GUI</a>
</center>
<br>


<a name="intro"><h2 id="heading2">Intro</h2></a>

<p id="text">To make OpendTect  use my own algorithms to produce new seismic data, OpendTect has the concept of Attributes.
</p>
<p id="text">Attributes are the concept of making an output at a certain location. When defining an attribute, we don't care at all about how the seismic data around a certain position is provided to us. For this, there is the Attribute Engine which is a part of the base system. Thus, we only have to worry about our algorithms that deliver a certain value given the seismic data around the location. This data can originate from different input cubes.</p>
<p id="text">Attributes (can) have many inputs from other attributes or stored cubes, and they can produce many outputs. To make an attribute work, you will have to create:</p>
<ul>
<li>A subclass of Attrib::Provider (the part that does the actual work)
<li>A subclass of uiAttribDescEd (the GUI part: it makes the attribute accessible to users)
</ul>


<a name="attribprov"><h2 id="heading2">The Attrib::Provider</h2></a>
<p id="text">An Attrib::Provider contains a combination of:</p>
<ol>
<li>Parameters that make the attribute work (<a href=#descfuncs>Description functions</a>)
<li>Initialization code (<a href=#initfuncs>Initialization functions</a>)
<li>Actual execution stuff (<a href=#execfuncs>Execution functions</a>)
</ol>
<p id="text">These are the phases in the attribute class definition.
</p>

<a name="descfuncs"><h3 id="heading3">Description functions</h3></a>
<p id="text">The description functions declare and describe all the parameters that will be required to make the attribute work; they also specify the number and type of the inputs and outputs.</p>

<h3 id="heading3">initClass()</h3>
<p id="text">This is the most important description class, the one where all parameters are declared with their corresponding types and eventually some default values or limits; the inputs and outputs are also listed here.</p>
<p id="text">This function CANNOT be omitted, even the simplest attribute you can imagine will require at least the description of its output type.</p>

<h3 id="heading3">updateDesc()</h3>

<a name="initfuncs"><h3 id="heading3">Initialization functions</h3></a>
<p id="text">The initialization functions are called before the actual work starts. The are used for allocating buffers, connecting input and output, and so forth.</p>

<h3 id="heading3">getInputOutput()</h3>
<p id="text">In this function you can specify the outputs of your inputs that you need for calculation among the available outputs of that input. In many cases you will not have to supply this function.</p>
<p id="text"><i>Usage</i>: Say our input #5 has 3 outputs and we only need the second and third. Then we'd have:</p>
<code><pre>Attrib::MyAttribute::getInputOutput( int input, TypeSet<int>& outs )
{
    if ( input == 5 ) { res += 1; res += 2; }
    return true;
}
</pre></code>
<p id="text">If an extra check on the input had shown it was empty then we would have returned false.
</p>


<a  name="execfuncs"><h3 id="heading3">Execution functions</h3></a>


<a name="uiattrdesced"><h2 id="heading2">The uiAttribDescEd</h2></a>

<br>
<br>
<br>

<p>
<center>
  <a href="index.html">Index</a>
| <a href="overview.html">Overview</a>
| <a href="rules.html">Rules</a>
| <a href="plugins.html">Plugins</a>
| <a href="unix.html">UNIX</a>
| <a href="windows.html">MS Windows</a>
| <a href="http://www.opendtect.org">opendtect.org</a>
</center>
</p>


										
</td></tr>

			 </font>
						 </tbody>
			 </table>
				 </div>
			 <div id="footer">
			 </div>
			 </div>
		 </div>
	 </div>
 </div>
 </body>
 </html>
