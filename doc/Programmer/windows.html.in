<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-gb" lang="en-gb" dir="ltr" >
<!--
  - CopyRight:  (C) dGB Earth Sciences
  - Author:     A.H. Lammertink / A.H. Bril
  - Date:       Nov 2003
  - Contents:   Windows specific stuff for programmers
  - RCS:        $Id$ 
  -->
		
	<head>
		<title>Windows development [OpendTect Programmer's manual V@OpendTect_VERSION_MAJOR@.@OpendTect_VERSION_MINOR@]</title>
  <base href="windows.html" />
    <link rel="stylesheet" href="style.css" type="text/css" />
  </head>

<body id="page_bg" class="width_fmax">
		
<div id="all">
        <div id="wrapper">
                <div id="wrapper_r">
<div id="header">
                                <div id="header_l">
                                
                                        <div id="header_r">
						<a href="http://www.opendtect.org" title="OpendTect - Open Source Seismic Interpretation System" alt="OpendTect - Open Source Seismic Interpretation System" id="dGB46"><div id="topbanner"></a></div>
						<div id="topmenu">
						</div>
			<div id="leftcolumn">	
						<table id="greenborder"><tbody>
								<tr><td valign="top">
<center>
<h1>OpendTect development on MS Windows</h1>
  <a href=#vs12>Visual Studio 2017</a>
 | <a href=#cmake>CMake</a>
| <a href=#tutplugin>Building the Tutorial plugin</a>
| <a href=#ownplugin>Building your own plugin</a>
| <a href=#buildod>Building OpendTect</a>
</center>

<br>


<a name="vs12"><h3 id="heading3">Visual Studio 2017</h3></a>

<p id="text">OpendTect @OpendTect_VERSION_MAJOR@.@OpendTect_VERSION_MINOR@ is built with Visual Studio 2017, and it also supports Visual Studio 2017 Community Edition. The Community Edition can be downloaded from <a href="https://visualstudio.microsoft.com/downloads/">Microsoft's official web site </a></p>

<a name="cmake"><h3 id="heading3">CMake</h3></a>
<p id="text">CMake is a cross-platform tool that takes care of generating system-dependent project files. It can be downloaded from <a href="http://www.cmake.org/cmake/resources/software.html">CMake's web site</a>.</p>
<a name="tutplugin"><h3 id="heading3">Building the Tutorial plugin</h3></a>
<p id="text">
To get the whole process going we will first build the Tutorial plugin. This will set up the Visual studio project we need, and the plugin itself can be very useful for understanding several important OpendTect programming concepts.</p>

<p id=text> The basic idea is like this, first you have your OpendTect installation folder, where you actually download the developers package from the installation manager, then you have to create your own plugin development environment which should be outside the OpendTect installation folder, the reason for this is of course that these two environments should be different, and you do not want to mix up your own plugin development work along with your software installation.</p>

<ul id="bullets">
<li>Install developers package from the installation manager. 
<li>start OpendTect and then from Utilities-Tools-Create Devel Environment launch the create work environment tool. There specify a folder (WORK) to copy the plugin building material into. That can be any folder with names like "C:\WORK" or "D:\Tools\ODWork" but <b><i>Do Not Put It In The OpendTect Installation Folder</i></b>. After creation, this will be where you do your work, so choose a stable, backed-up directory there.
<li>Now start CMake (desktop item or its Windows start menu). Select the WORK directory you just created, and put it in both the "source" and "output". Then press the 'Configure' button.
<li>Configure will probably fail due to missing OpendTect-DIR. This can be specified, choose the OpendTect installation directory there (e.g C:\Program files\OpendTect\@OpendTect_VERSION_MAJOR@.@OpendTect_VERSION_MINOR@.0). Now press configure again.
<li>Some virus scanners like AVG will ring the alarm bells, and this can make the whole process fail. This is because CMake tries to link a program to test the system setup. To get this right, I had to disable my virus scanner (AVG).
<li>When you get 'Configuring done' you may still have a few red lines in the variables box. Don't worry: things should be ready and you can press the 'Generate' button. You can close CMake and switch your anti-virus back on.
</ul>
<p id="text">CMake has now generated the projects and the solution file for the plugins. Now you can start Visual studio and load the OpendTect_Tutorial_Plugin.sln which has just been created by CMake, in your WORK directory.<br>
Then, to build the plugins: simply right-click on 'Tut' and 'uiTut' and do 'Build' for each. That's all.</p>


<h3 id="heading3">Debugging the Tutorial plugin </h3>
<p id="text">Open the plugin solution in Visual Studio, and right-click on the solution item, and open the solution properties window. Here you can specify the debug source file location, so in your case add the location of the OpendTect source files which are installed by the installation manager, i.e. C:\Program Files\OpendTect\@OpendTect_VERSION_MAJOR@.@OpendTect_VERSION_MINOR@.@OpendTect_VERSION_DETAIL@ Now select the "od_main" project which is a launcher project to launch od_main debug executable that comes with the developers package. Right click on this project and set to "Set as startup project". When you press F5 for debugging this project will be started. Ignore if you see any Visual studio warnings. The OpendTect main program, od_main.exe will be launched.</p>
<p id="text">From Utilities-Installation-Plugins OpendTect try to load your plugin by browsing to the WORK(D:\WORK)\bin\win64\Debug folder. To debug something, just set a break point in the code. So when the control comes to the break-point it will stop there and you can debug your code. You can also browse into OpendTect source files if you have specified the OpendTect source file location is the solution properties as mentioned above</p>

<a name="ownplugin"><h3 id="heading3">Building your own plugin</h3></a>
<p id="text">If you want to create your own plugin, you have to create a folder with the name of your plugin inside your plugin development environment and add the source files and CMakeLists.txt to this folder as done in the tutorial plugins.

Procedure:</p>

<ul>
<li>Exit Visual Studio.
<li>Create the folder for your plugin project and rename it with the name of your plugin e.g 'My_Inversion'.
<li>Add "my_inversion_pi.cc" along with other source files in this folder.
<li>Create a CMakeLists.txt file inside this folder and add the entries for all your source files to it.
<li>Edit the ODWork\CMakeLists.txt, add 'My_Inversion' to the list of projects. Currently you will see both Tut and uiTut in this list.
<li>Now configure CMake just like you configured before. I didn't have to disable my virus scanning anymore, but you may have to do this.
<li>If you manage to make the projects and successfully build them, then start the od_main project again and load the new plugin DLL from ODWork\bin\(win32/64)\Debug in to OpendTect. If all goes well you will be able to debug your code by putting a break point in your source files.
</ul>

<h3 id="heading3">Debugging your own plugin </h3>
<p id="text">The process is exactly similar as described above, 1)start Visual Studio 2) build the plugin 3) start 'od_main' project 4) load and debug your plugin.</p>


<h3 id="heading3">Distributing your own plugins</h3>
<p id="text">Your plugin can be distributed with the new installation manager and OpendTect download site. You have to ship the plugin binaries and documentation to opendtect.org, where it will be available for download.</p>


<a name="buildod"><h3 id="heading3">Building OpendTect (only for die hards)</h3></a>
<p id="text">To build OpendTect from source you need to pull the source code from <a href="https://github.com/OpendTect/OpendTect">https://github.com/OpendTect/OpendTect</a>. Then build the solution with CMake. In this case launch CMake and browse to your OpendTect source folder and start configuring and generating from CMake. CMake will prompt for Qt and OpenSceneGraph directory location, select them from CMake itself and continue. Once the projects and solution are generated you can start building OpendTect.</p>  

<h3 id="heading3">Qt</h3>
<p id="text">A Qt installation is only necessary when you want to build a plugin which is directly dependent on Qt or you want to build OpendTect from scratch. Download Windows Qt package from the <a href="https://www.qt.io/developers/">Qt website</a>. </p>


<h3 id="heading3">OpenSceneGraph</h3>
<p id="text">A full OpenSceneGraph installation is only necessary when you want to build a plugin which is directly dependent on OpenSceneGraph or if you want to build OpendTect from scratch. Download an OpenSceneGraph installation, or get the source code from <a href="http://OpenSceneGraph.org/">OpenSceneGraph</a> repositories and build yourself using Visual Studio.</p>
<br>


<br>


<p>
<center>
  <a href="index.html">Index</a>
| <a href="overview.html">Overview</a>
| <a href="rules.html">Rules</a>
| <a href="plugins.html">Plugins</a>
| <a href="attributes.html">Attributes</a>
| <a href="unix.html">UNIX</a>
| <a href="http://opendtect.org">opendtect.org</a>
</center>
</p>

										
</td></tr>

			 </font>
						 </tbody>
			 </table>
				 </div>
			 <div id="footer">
			 </div>
			 </div>
		 </div>
	 </div>
 </div>
 </body>
 </html>
