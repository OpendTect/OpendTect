<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-gb" lang="en-gb" dir="ltr" >
<!--
  - CopyRight:	(C) dGB Earth Sciences
  - Author:	A.H. Bril
  - Date:	Oct 2003
  - Contents:	Plugins
  - RCS:	$Id$
 -->

        <head>
	<title>Plugins [OpendTect Programmer's manual V@OpendTect_VERSION_MAJOR@.@OpendTect_VERSION_MINOR@]</title>
  <base href="plugins.html" />
    <link rel="stylesheet" href="style.css" type="text/css" />
  </head>

<body id="page_bg" class="width_fmax">

<div id="all">
        <div id="wrapper">
	        <div id="wrapper_r">
<div id="header">
                                <div id="header_l">

                                        <div id="header_r">
					        <a href="http://www.opendtect.org" title="OpendTect - Open Source Seismic Interpretation System" alt="OpendTect - Open Source Seismic Interpretation System" id="dGB46"><div id="topbanner"></a></div>
						<div id="topmenu">
						</div>
			<div id="leftcolumn">
			                        <table id="greenborder"><tbody>
						                <tr><td valign="top">
<center>
<h1>OpendTect plugins</h1>
<a href=#intro>Intro</a>
| <a href=#concept>Concept</a>
| <a href=#tutplugin>The Tutorial plugin</a>
| <a href=#helpdoc>Help Doc Creation</a>
| <a href=#autoload>Installation and auto-loading</a>
</center>
<br>


<a name="intro"><h2 id="heading2">Intro</h2></a>
<h3 id="heading3">Background</h3>

<p id="text"> Making your own software within OpendTect is in principle pretty
easy. You <i>could</i> change the software by modifying existing
classes and functions, and adding your own stuff to the libs. The
advantage is total control. The problem with this approach, however,
is that you have to keep the OpendTect sources in sync with new
releases. Furthermore, if you cannot convince the opendtect.org people
to also make those changes, OpendTect users may not be happy with your
work. </p>

<p id="text"> An easy way to overcome this is to make your own plugins. Plugins
make use of all the facilities of OpendTect but are loaded at run-time
and can therefore be developed in a completely independent way. If you
then find things that can't be done without modifying the OpendTect
environment, it should be much easier to convince the opendtect.org
people to take over or even implement those things themselves. </p>

<p id="text"> One thing you <i>cannot</i> do, is use another compiler than
<b>gcc/g++</b> on Linux/Mac or <b>VC++</b> on Windows. OpendTect is built with it, if you want to use another compiler (why?) you'll have to make all libs and supporting libs (Qt, OpenSceneGraph) yourself. The make itself should be pretty easy to get started, but there will probably be some porting to do, too.</p>

<br><br>
<a name="concept"><h2 id="heading2">The concept</h2></a>
<h3 id="heading3">Dynamic loading</h3>

<p id="text"> All modern Operating systems nowadays have ways to dynamically
load libraries into a running program. The basic idea is:</p>

<ul>
<li>Open the library
<li>Query the contents for a certain routine using a string key
<li>Call the routine returned
<li>The routine then does the things needed to make itself useful.
</ul>


<p id="text"> As an example, a 'hello world' program could conceptually look
like this:

<pre id="code"><code>

dynlib = OpenDynamicLib( "libc.so" );
PrintfTypeFunction fn = (PrintfTypeFunction)GetDynLibFn( dynlib, "printf" );
fn( "Hello world\n" );

</code></pre>
</p>

<p id="text"> In this very simple case calling the function has no other effect
than printing a string. In OpendTect, you'd want to add an attribute,
create a menu item in the Opendtect menu, start horizon tracking, that sort of thing. </p>

<h3 id="heading3">OpendTect plugins</h3>

<p id="text"> In OpendTect, all of the dynamic lib querying etc. is already
programmed. A plugin just needs to contain a few standard functions
that will be called automatically when the dynamic library is loaded.
There are three functions, of which only one is really required. Let's
say the name of the plugin is MyMod, these functions will be: </p>

<pre id="code"><code>GetMyModPluginType
GetMyModPluginInfo
InitMyModPlugin
</code></pre>

<p id="text"> Only the last one is required. The first one,
<code>Get...PluginType</code> determines whether the plugin can be
used for the <a href=#autoload>auto-load</a>, and if so, when. 'When'
means: before or after the program has created the OpendTect GUI
objects (and always after the static objects are initialized). The
second function simply provides info for the users of your plugin.
</p>

<p id="text">An important remark here is that CMake supports plugin generation fully when the subdirectory name is the same as the plugin (base-)name. Thus, subdirectory MyPlugin generates libMyPlugin.so (or libMyPlugin.dylib or MyPlugin.dll) which should contain an InitMyPlugin() function.</p>
<p id="text">Anyway, after typing
<code>make</code> the plugin should be generated. The new plugin can
be loaded from within OpendTect (Menu Utilities-Plugins; press the
'Load new' button).</p>

<h3 id="heading3">Macros to define the required functions</h3>

<p id="text">There are macros available to define the plugin functions. They make it easier to read and maintain these functions. They are in odplugin.h. You'll use 2 of them for late (UI) plugins, 3 for early:</p>
<ul>
<li><code>mDefODPluginEarlyLoad(PluginName)</code>
<li><code>mDefODPluginInfo(PluginName)</code>
<li><code>mDefODInitPlugin(PluginName)</code>
</ul>
</code>
<p id="text">See the Tutorial plugin code for example.</p>

<a name="tutplugin"><h3 id="heading3">The Tutorial plugin</h3></a>

<h3 id="heading3">Intro</h3>

<p id="text">We have created the Tutorial plugins that you can find in your work environment. As is common in OpendTect, there is a plugin 'Tut' for non-ui, real-work stuff, and the 'uiTut' for the GUI part.</p>
<p id="text">The idea of the tutorial plugins is to show a variety of common things that one might want to do, rather than make something useful for end-users. For that we'll make the following tools:</p>
<ul>
<li>Manipulating some seismic data (read, process, write)
<li>The same, but now using an Attribute
<li>Do some work with horizons
<li>Do some work with wells
</ul>
<p id="text">In the process, we'll see how to:
<ul>
<li>Create menu items and toolbar icons
<li>Make right-click tree item menus
<li>Work in the OpenSceneGraph 'vis' world
<li>Work with DataPack's and create flat displays
</ul>
</p>


<h3 id="heading3">The <code>uiTut</code> plugin</h3>

<p id="text">In uiTut, the GUI consists of two parts. One deals with opening an independent dialog box via a menu item in the 'Utilities' menu. The other part gets the 'Tutorial' attribute listed in the 'Edit Attributes' dialog and creates the input fields in the same dialog box. It also sends the input parameters to <a href=#tutattrib><code>Tutorial</code></a> for attribute computation</p>

<p id="text">Let us first have a look at the independent dialog part which in turn has two parts -- one for seismic tools and the other for horizon tools. The only interesting part is the <code>uiIOObjSel</code> class which allows you to select an item from a set -- a horizon or a seismic cube ( subclass <code>uiSeisSel</code> is used for seismic cube selection).</p>

<p id="text"> Both <code>uiSeisTools</code> and <code>uiHorTools</code> use the class <code><a href="Generated/uiTools/classuiTaskRunner.html">uiTaskRunner</a></code>, which triggers the <code>Executor</code>'s in the <b><code><a href=#tut>Tut</a></code></b> plugin. The class <code>uiTaskRunner</code> also displays a progress bar which keeps the user informed about the progress of the process.</p>

<p id="text"> Now we come to the attribute part. In the uitutorialattrib.cc file we see that although uiAttrDescEd is not a uiDialog like the the uiHorTools, it still is a valid parent (being a uiGroup) for the various UI elements. A nice feature of OpendTect is clear from the first line in the constructor: the inpfld is a special Attribute UI class which is handled just like any pre-defined uiBase or uiTools class. This illustrates that in the OpendTect GUI system, not only pre-made GUI elements are 'first class' - new objects with different shape and behavior attached will be usable transparently by any other GUI class.</p>

<p id="text">Coming to the plugin 'main' file <code>uitutpi.cc</code>, like any typical UI plugin, uiTut is a LATE plugin, which means that it will be loaded only after the rest of the UI is already in place. Thus, you must not put mDefODPluginEarlyLoad().</p>

<p id="text"> Then comes the second 'special' plugin function <code>GetxxxPluginInfo()</code>. You may want to refer to the definition of the class <code>PluginInfo</code> for a better understanding of the above function. It allows the plugin manager to make this info available to the world.</p>

<code><pre id="code">
mDefODPluginInfo(uiTut)
{
    DefineStaticLocalObject( PluginInfo, retpi,(
        "Tutorial plugin",
	"OpendTect",
	"dGB (Raman/Bert)",
	"3.2",
	"Shows some simple plugin development basics."
	    "\nCan be loaded into od_main only." };
    return &retpi;
}
</pre></code>

<p id="text"> And the last 'special' function is the one which gets things going:</p>

<code><pre id="code">mDefODInitPlugin(uiTut)
{
    mDefineStaticLocalObject( PtrMan<uiTutMgr>, theinst_, = 0 );
    if ( theinst_ ) return 0;

    theinst_ = new uiTutMgr( ODMainWin() );
    if ( !theinst_ )
        return "Cannot instantiate Tutorial plugin";

    uiTutorialAttrib::initClass();
    TutHelpProvider::initClass();
    return 0;
}

</pre></code>

<a name="tut"><h3 id="heading3">The <code>Tut</code> plugin</h3></a>

<p id="text"> The responsibility of uiTut is limited to talking to the user and getting the input parameters. The real work is done behind the scene by the non-UI <b><code>Tut</code></b> plugin. And that is the reason why it is of type EARLY. This particular plugin tells OpendTect's application manager that it wants to be loaded early - i.e. before any build of tables, data structures or user interfaces are made. That is typical of 'Real Work' plugins. The alternatives are NONE (which is very uncommon) and LATE, which is typical
for UI plugins that want to start working when all objects have already been created. In this case, we need to specify that we have an EARLY plugin:</p>
<pre id="code"><code>
mDefODPluginEarlyLoad(Tut)
</pre></code></p>

<a name="seistools"><h3 id="heading3">SeisTools</h3></a>

<p id="text"> Let us first look at the direct seismic operations, that are handled by the class <code>SeisTools</code>, which in turn is a subclass of class <code>Executor</code>. 'Real work' is done by the function <code>nextStep()</code> which is typical of class <code>Executor</code>. Here, three different operations are possible: Scaling, where you can multiply the data values by a certain factor and apply a shift; Squaring, where, as the name suggests, you can take a square of the data values; and Smoothening, where you can take the arithmetic average of 3 or 5 samples depending on the filter strength. Traces are read one-by-one by a <code>SeisTrcReader</code> and supplied to the function <code>handleTrace()</code> where the actual computation is done. Then a SeisTrcWriter writes the output traces one-by-one to the output cube.</p>

<code><pre id="code">int Tut::SeisTools::nextStep()
{
    if ( !rdr_ )
        return createReader() ? Executor::MoreToDo()
	                      : Executor::ErrorOccurred();

    int rv = rdr_->get( trcin_.info() );
    if ( rv < 0 )
        { errmsg_ = rdr_->errMsg(); return Executor::ErrorOccurred(); }
    else if ( rv == 0 )
        return Executor::Finished();
    else if ( rv == 1 )
    {
        if ( !rdr_->get(trcin_) )
	    { errmsg_ = rdr_->errMsg(); return Executor::ErrorOccurred(); }

        trcout_ = trcin_;
	handleTrace();

        if ( !wrr_ && !createWriter() )
	    return Executor::ErrorOccurred();
	if ( !wrr_->put(trcout_) )
	    { errmsg_ = wrr_->errMsg(); return Executor::ErrorOccurred(); }
    }

    return Executor::MoreToDo();
}

</pre></code>

<p id="text"> Scaling and squaring are single-sample operations. But as you can see in the implementation of the function <code>handleTrace()</code> below, smoothening involves multi-sample computation. It requires separate input and output traces. Otherwise, if we did the operation on the same trace, we would be taking the modified values of samples preceding the current sample. For the sake of simplicity, we make a copy of the input trace to store the output values. This is not a good practice as it results in duplication of data. But since it is a tutorial, our aim is to keep the code as simple as possible and leave the efficiency part for serious programming.</p>

<code><pre id="code">
void Tut::SeisTools::handleTrace()
{
    switch ( action_ )
    {

    case Scale: {
        SeisTrcPropChg stpc( trcout_ );
	stpc.scale( factor_, shift_ );
    } break;

    case Square: {
        for ( int icomp=0; icomp < trcin_.nrComponents(); icomp++ )
	{
	    for ( int idx=0; idx < trcin_.size(); idx++ )
	    {
	        const float v = trcin_.get( idx, icomp );
		trcout_.set( idx, v*v, icomp );
		}
	}
    } break;

    case Smooth: {
        const int sgate = weaksmooth_ ? 3 : 5;
	const int sgate2 = sgate/2;
	for ( int icomp=0; icomp < trcin_.nrComponents(); icomp++ )
	{
	    for ( int idx=0; idx < trcin_.size(); idx++ )
	    {
	        float sum = 0;
		int count = 0;
		for( int ismp=idx-sgate2; ismp <= idx+sgate2; ismp++)
		{
		    const float val = trcin_.get( ismp, icomp );
		    if ( !mIsUdf(val) )
		    {
		        sum += val;
			count++;
			}
		}
		if ( count )
		    trcout_.set( idx, sum/count, icomp );
		}
	}

    } break;

    }

    nrdone_++;
}
</pre></code>

<h3 id="heading3">HorTool</h3>

<p id="text"> Similar to <code>SeisTools, HorTool</code> performs some simple operations on horizons: thickness computation and smoothening. Each of these operations is handled by a subclass of <code>HorTool</code> which is a subclass of <code>Executor</code> and as expected the computation is performed by the function <code>nextStep()</code>. You may notice here that no object of class <code>HorTool</code> is defined anywhere. It is only used as the base class for classes <code>ThicknessCalculator</code> and <code>HorSmoothener</code>. Let us have a look at the <code>nextStep()</code> function in class <code>ThicknessCalculator</code> to see how the data values are accessed in a <code>Horizon3D</code>:</p>

<code><pre id="code">int Tut::ThicknessCalculator::nextStep()
{
    if ( !iter_->next(bid_) )
        return Executor::Finished();

    int nrsect = horizon1_->nrSections();
    if ( horizon2_->nrSections() < nrsect ) nrsect = horizon2_->nrSections();

    for ( EM::SectionID isect=0; isect<nrsect; isect++ )
    {
        const EM::SubID subid = bid_.getSerialized();
	const float z1 = horizon1_->getPos( isect, subid ).z;
	const float z2 = horizon2_->getPos( isect, subid ).z;

        float val = mUdf(float);
	if ( !mIsUdf(z1) && !mIsUdf(z2) )
	    val = fabs( z2 - z1 ) * usrfac_;

        posid_.setSubID( subid );
	posid_.setSectionID( isect );
	horizon1_->auxdata.setAuxDataVal( dataidx_, posid_, val );
    }

    nrdone_++;
    return Executor::MoreToDo();
}</pre></code>
<p id="text"> Please note the difference in the function <code>dataSaver</code> in the two classes. In <code>ThicknessCalculator</code>, it saves the auxilary data, whereas in <code>HorSmoothener</code>, it saves the geometry.</p>

<a name="tutattrib"><h3 id="heading3">The Tutorial Attribute</h3></a>

<p id="text"> We have seen the direct seismic approach to simple operations on seismic data in <a href=#seistools><code>SeisTools</code></a>. For our purpose, it suits well. But the main problem with this approach is the difficulty in multi-trace handling. Moreover, for large seismic volumes, handling each trace one-by-one may slow down the process. This brings us to another approach called <i>Attributes</i>. In this example, we define the <i>Tutorial</i> attribute to do things once done by <code>SeisTools</code>. As we discuss different aspects of making an attribute, we will also discuss its advantages over the direct seismic approach.</p>

<p id="text"> The main plugin file "tutpi.cc" makes a call to <code>Tutorial::initClass()</code>. The class <code>Tutorial</code> ( tutorialattrib.h ) is defined as a subclass of <a href="Generated/AttributeEngine/classAttrib_1_1Provider.html">Attrib::Provider</a> class. Every attribute is a provider, each can thus be used as input for another attribute.</p>

<h3 id="heading3">Steering</h3>

<p id="text"> A <i>Steering cube</i>, as the name suggests, works as a guiding cube. It stores the <i>Inline dip</i> and <i>Crossline dip</i> at each point, which guides the attribute engine in multi-trace computations. In case of our <i>Tutorial</i> attribute, we can use the steering data for horizontal smoothening. The key function is <a href=#initsteer><code>initSteering()</code></a> which makes the steering data available in the form of shifts relative to the central trace. To understand how this shift is used during computation, please refer to the <a href=#horsmooth><i>horizontal smoothening</i></a> section in the function <a href=#compdata><code>computeData().</code></a></p>

<p id="text">Some fundamental attribute functions are listed here:</p>

<h3 id="heading3">createInstance()</h3>
<p id="text">This function is standard for every attribute,
here is the attribute constructor called. Use the macro mAttrDefCreateInstance to define createInstance:<br>
<br><code>mAttrDefCreateInstance(Tutorial)</code></p>

<h3 id="heading3">initClass()</h3>
<p id="text"> This static function initializes the attribute: sets up the parameters and
the number and type of the inputs and outputs. You can compare this to what you see in Opendtect in the attribute definition window after loading the uiTut
plugin.</p>

<p id="text"> If you look at the parts of the implementation carefully,
( tutorialattrib.cc ) you'll see that each parameter is built up following
this example: </p>

<pre id="code"><code>EnumParam* action = new EnumParam( actionStr() );
    action->addEnum( "Scale" );
    action->addEnum( "Square" );
    action->addEnum( "Smooth" );
    desc->addParam( action );
</code></pre>

<p id="text">Every parameter is required by default, to overrule this use <code>setRequired(false)"</p>

<p id="text">initClass() also adds the attribute to the attribute factory.
In this case, as every attribute is a provider, the Tutorial attribute is
added to PF() (the <a href="Generated/AttributeEngine/classAttrib_1_1ProviderFactory.html"
>Attrib::ProviderFactory</a> singleton access function).</p>


<h3 id="heading3">updateDesc()</h3>
<p id="text">Will be used not only to update the parameters but also the number and type
of the outputs and to add or disable some inputs. If you look at the
implementation for the tutorial attribute, this function just allows to enable or disable
the inputs ( factor, shift and smooth ) according to the action chosen
by the user</p>


<h3 id="heading3">getInputOutput()</h3>
<p id="text"> we need to define this <a href=attributes.html#phases>initialization</a> function because we have Steering. Steering always carries two outputs and we need them both.
</p>

<a name="initsteer"><h3 id="heading3">initSteering()</h3></a>
<p id="text"> If we are using steering data, this function prepares the steering input for use in computation. A subvolume is generated around the central trace, with the size of the subvolume specified by the <i>stepout</i>. This data contains the shifts in terms of number of samples for each trace in the subvolume relative to the central trace.</p>
<code><pre id="code">void Tutorial::initSteering()
{
    if ( inputs[1] && inputs[1]->getDesc().isSteering() )
        inputs[1]->initSteering( stepout_ );
}
</pre></code>

<h3 id="heading3">getInputData()</h3>
<p id="text">Before the work can be done, some input has to be given. This function is the
place where you specify how to get your input data.
For the Tutorial this is the seismic data. But it can also be Steering Data or any other attribute.</p>

<code><pre id="code">bool Tutorial::getInputData( const BinID& relpos, int zintv )
{
    if ( inpdata_.isEmpty() )
        inpdata_ += 0;
    const DataHolder* data = inputs[0]->getData( relpos, zintv );
    if ( !data ) return false;
    inpdata_.replace( 0, data);


    if ( action_ ==2 && horsmooth_ )
    {
        steeringdata_ = inputs[1] ? inputs[1]->getData( relpos, zintv ) : 0;
	const int maxlength  = mMAX(stepout_.inl, stepout_.crl)*2 + 1;
	while ( inpdata_.size() < maxlength * maxlength )
	    inpdata_ += 0;

        for ( int idx=0; idx<posandsteeridx_.steeridx_.size(); idx++ )
	{
	    if ( posandsteeridx_.steeridx_[idx] == 0 ) continue;
	    const DataHolder* data =
	        inputs[0]->getData( relpos + posandsteeridx_.pos_[idx] );
		if ( !data ) continue;
	    inpdata_.replace( posandsteeridx_.steeridx_[idx], data);
	}
    }

    dataidx_ = getDataIndex( 0 );

    return true;

}</pre></code>

<p id="text"> You will notice from here that the calculation of the attributes is not done
on traces but using a different object, the DataHolder. The dataholder contains
a set of <a href="Generated/Basic/classValueSeries.html">ValueSeries</a> which
holds the value of every sample of the SeisTrc.
Advantage: in case of an attribute which has other attributes as inputs, data
is available in the corresponding dataholders, it thus saves a lot of time
( easier and much faster to read some floats in a ValueSeries than to get values
from a SeisTrc ). Stored data are read from cubes of seismic traces and written
the same way.</p>
<p id="text">The DataHolder is also carrying some specific information about the trace to
be processed, like the start sample number and the number of samples you wish
to calculate.</p>
<p id="text">Another important remark: calculation is made using sample numbers,
not time or depth</p>

<p id="text"> Most of the rest of the methods are there to comply with the
<code>Attrib::Provider</code> interface - see the <a
href="Generated/AttributeEngine/classAttrib_1_1Provider.html">Attrib::Provider
documentation</a>. The basic idea is that for each sample of each
trace one or more attribute values can be calculated. The number of
attribute values (or outputs) is defined in the <code>initClass()</code>
function. If your input requires additional samples (timegate) or neighbouring
traces (stepout), you will have to define <code>reqZMargin()</code> and
<code>reqStepout()</code> respectively. </p>

<a name="compdata"><h3 id="heading3">computeData()</h3></a>
<p id="text"> When we want to look at the actual work, the place to be is the
<code><b>computeData()</b></code> method. This is the place where you define the
mathematics for calculating the attribute. This function is called for each
trace of your output cube.</p>

<p id="text">In the computeData() method, we are faced with a number of Z ranges.
To be able to support multi-threading, computeData must be ready to only
process part of the trace. Then, also, we can have input cubes that are
larger than requested or desired, or smaller than that. This delivers a
rather nasty picture of Z indexes that we really cannot circumvent.
To make things at least clear, the indexes are all related to the the
absolute Z=0. This is where everything refers to. Then, we have different
start Z indexes for each of the input cubes and the output cube. These are
named 'z0_' in the corresponding DataHolders.</p>

<center>
<img src="fig_explainz0.png" alt="Explaining Z0">
</center>

<p id="text">Let us have a look at the <code>Tutorial::computeData</code> function and compare it with the code in <code>SeisTools</code>. The algorithm for actual computation is the same in both the cases, but there is a marked difference in the manner in which seismic data is accessed in each case. </p>

<code><pre id="code">bool Tutorial::computeData( const DataHolder& output, const BinID& relpos,
                           int z0, int nrsamples, int threadid ) const
{
    for ( int idx=0; idx < nrsamples; idx++ )
    {
        float outval = 0;
	if ( action_==0 || action_==1 )
	{
	    const float trcval = getInputValue( *inputdata_, dataidx_,
	                                        idx, z0 );
						outval = action_==0 ? trcval * factor_ + shift_ :
						trcval * trcval;
					}
	else if ( action_==2 && !horsmooth_ )
	{
	    float sum = 0;
	    int count = 0;
	    for ( int isamp=sampgate_.start; isamp <= sampgate_.stop; isamp++ )
	    {
	        const float curval = getInputValue( *inpdata_[0], dataidx_,
		                        idx + isamp, z0 );
					if ( !mIsUdf(curval) )
		{
		    sum += curval;
		    count ++;
		}
		}
	    outval = sum / count;
	<a name="horsmooth">}</a>
	else if (action_ == 2 && horsmooth_ )
	{
	    float sum = 0;
	    int count = 0;
	    for ( int posidx=0; posidx < inpdata_.size(); posidx++ )
	    {
	        if ( !inpdata_[posidx] ) continue;
		const float shift = steeringdata_ ?
		        getInputValue( *steeringdata_,posidx, idx, z0 ) : 0;
			const int sampidx = idx + ( mIsUdf(shift) ? 0 : mNINT(shift) );
		if ( sampidx < 0 || sampidx >= nrsamples ) continue;
		const float val = getInputValue( *inpdata_[posidx],
		                        dataidx_, sampidx, z0 );
					if ( !mIsUdf(val) )
		{
		    sum += val;
		    count ++;
		}
		}
	    outval = sum / count;
	}

        setOutputValue( output, 0, idx, z0, outval );
    }

    return true;

}

</pre></code>


<br>

<a name="helpdoc"><h2 id="heading2">Creating the Help Documention</h2></a>

<h3 id="heading3">The help system</h3>

<p id="text">Like any other commercial application, our plugin also needs a help document which a user can see by clicking on a button in the user interface. The OpendTect help system is quite flexible and allows a plugin to define its own way of showing help information. But in most cases all you want is to open an HTML file either stored locally or on the web. For this purpose we have a class called SimpleHelpProvider that provides a key-link based help system. The idea is to have a common base URL (can be a local file path) and then append links for individual help documents to this base URL, based on keys.<p>

<p id="text"> So, you need to define your own HelpProvider class as a subclass of SimpleHelpProvider and initialize it when the plugin loads. A good example is the TutHelpProvider defined in uitutpi.cc:<p>

<code><pre id="code">
class TutHelpProvider : public SimpleHelpProvider
{
public:
TutHelpProvider( const char* baseurl, const char* linkfnm )
    : SimpleHelpProvider(baseurl,linkfnm)
{}

static void initClass()
{
    HelpProvider::factory().addCreator( TutHelpProvider::createInstance, "tut");
}

static HelpProvider* createInstance()
{
    FilePath fp( GetDocFileDir(""), "User", "tut" );
    BufferString baseurl( "file:///" );
    baseurl.add( fp.fullPath() ).add( "/" );

    fp.add( "KeyLinkTable.txt" );
    BufferString tablefnm = fp.fullPath();

    return new TutHelpProvider( baseurl.buf(), tablefnm.buf() );
}

};
</pre></code>

<p id="text">The three key elements of this class are:<ul><li>The provider key: 'tut' in this case.
    <li>The base URL: Here it is a local path inside the OpendTect installation. But it can as well be a web URL like 'http://doc.opendtect.org/'
    <li>The key-link table, which is read from a file 'KeyLinkTable.txt' here. But you can also make it on-the-fly using the function addKeyLink. That is rather convenient if you are doing it just for a couple of plugins.
</ul>

<p id="text">Then in the UI you can use a HelpKey comprising of two parts: the provider key ('tut' for example) and the key for the individual UI, like 'hor' in uiHorTools:<p>
<code><pre id="code">
uiTutHorTools::uiTutHorTools( uiParent* p )
        : uiDialog( p, Setup( tr("Tut Horizon tools"),
	                      tr("Specify process parameters"),
			      HelpKey("tut","hor") ) )
</pre><code>
<p id="text">When the user clicks on the help button the HelpProvider will look for the link for the corresponding key, append the link to the base URL and open the document<p>


<a name="autoload"><h2 id="heading2">Installation and auto-loading</h2></a>

<p id="text"> Once you have made your own plugin, you probably would like it to
be loaded automatically whenever OpendTect is started. OpendTect
    provides some facilities that do just that. </p>

<h3 id="heading3">Preparing a plugin for auto-load</h3>

<p id="text"><code>#include "odplugin.h"</code> is needed for the PluginInfo
structure and the PI_AUTO_INIT_xxx defines. </p>

<p id="text">
The GetxxxxPluginType() specifies when a plugin is loaded: </p>
<ul>
<li>PI_AUTO_INIT_EARLY : Plugin is loaded before construction of main
window</li>
<li>PI_AUTO_INIT_LATE : Plugin is loaded after construction of main
window</li>
</ul>
<p id="text">The default is PI_AUTO_INIT_LATE, so you only have to define anything if the plugin needs to be loaded early: then use mDefODPluginEarlyLoad(YourPluginName).
</p>

<h3 id="heading3">Installing plugins for auto-load</h3>

<p id="text"> The auto-load tool of OpendTect looks for plugins to load in two
places: </p>

<p id="text">1) Where are the .ALO files stored? The two locations searched are (in this order):</p>
 <ul><li><code>&lt;userdir&gt;/plugins/&lt;platform_dir&gt;</code></li>
 <li><code>&lt;systemdir&gt;/plugins/&lt;platform_dir&gt;</code></li>
</ul>
<p id="text">2) Where are the plugin libraries? Locations are:</p>
<ul><li><code>&lt;userdir&gt;/bin/&lt;platform_dir&gt;/[Release|Debug]</code></li>
<li><code>&lt;systemdir&gt;/bin/&lt;platform_dir&gt;/[Release|Debug]</code></li>
</ul>
<p id="text">The &lt;userdir&gt; is determined as follows:</p>

<ul><li>If it is set, <code>$OD_USER_PLUGIN_DIR</code></li>
<li>Else, the user settings directory is used: <code>~/.od</code></li>
</ul>

<p id="text"> On Windows, your 'Personal directory' is located at $HOME if this
is defined. Otherwise, $USERPROFILE is used. Also see the specific
notes in the <a href="windows.html#installplugins"> windows</a>
documentation. </p>


<h3 id="heading3">Using .alo files</h3>

<p id="text">Auto Load files are simple text files that tell a program which
plugins it is supposed to load from the 'libs' directory. Since
OpendTect contains multiple programs, each program has its own set of
.alo files '&lt;program name&gt;.*.alo', while the plugins can be
shared between multiple programs. OpendTect will scan for any file
with this naming convention. So od_main.john.alo is perfectly OK.</p>

<p id="text">Since there are multiple vendors and/or plugin sets, each vendor
can make his own .alo files. od_main, for example, will look at any
file named od_main.*.alo. For this example, the default plugins are
specified by od_main.base.alo, while dgb's plugins are specified by
od_main.dgb.alo. This way, each vendor can make his own .alo files,
without interfering with others.</p>

<p id="text">A .alo file is nothing more then a simple list of plugins, without
extensions. For example, this could be in an od_main.base.alo file:
</p>

<pre id="code"><code>
Annotations
Madagascar
uiMadagascar
CmdDriver
GMT
uiGMT
</code></pre>

<p id="text"> Note that for each platform, a specific .alo file must be created.
Usually, they will be the same, but some plugins might not be relevant or
supported on all platforms. </p>

<p id="text">The plugins in the .alo files are loaded in the order as specified in the file. The alo files themselves are handled in alphabetical order. </p>


<br>
<h2 id="heading2">Distributing your plugins</h2>

<p id="text"> The publishing and distribution of OpendTect plugins is pretty
straightforward. The .alo files can be installed in the plugins/platform
(<code>$DTECT_APPL/plugins/$HDIR</code>) directory, while the actual
plugins (the .DLL, .so or .dylib files) go in the normal bin sub-directory. </p>

<p id="text"> On Unix, this means that you can make a tar.gz or zip file containing
the plugins in a directory structure as described above, which can be
extracted into the existing OpendTect installation directory. </p>

<p id="text"> On Windows this is also possible, but it is more common to use an
auto-extracting installer to do this. For more info on this, see the
<a href="windows.html#dist">windows</a> documentation.</p>

<p id="text">If you want your plugins to be used around the world, then you may want to contact support@dgbes.com to get your plugin(s) distributed via the OpendTect installation Manager. Be prepared to have the opendtect.org people take a look at your code and test the stability. Then make the packages along the lines described below. You'll also have to provide information about yourself and the plugin - and a picture of a certain size.</p>

<h3 id="heading3">Preparing for the installation manager</h3>
<p id="text">
The general structure of a package is explained in the following diagram:</p>

<center>
<img src="fig_explain_pkg.png" alt="Explaining Package Structure">
</center>

<p id="text">
It is important that you make the packages nicely modular. Even if you have only two platforms yet, still it's a good idea to split the stuff in platform-independent and platform-dependent stuff. And separate documentation. In that case there would be 4 packages:</p>
<ul>
<li>The platform-independent part (hidden for the user)
<li>Part for platform 1
<li>Part for platform 2
<li>Documentation
</ul>
<p id="text">The user will see only two: the plugin itself and the documentation.
</p><p id="text">
Then the naming of the packages. Let's not make a big specification document; you can guess this by looking at what is now in the <a href="http://download.opendtect.org/relman/defs/opendtect.txt">opendtect.txt</a> file. Specifics:
<ul>
    <li>We will need a similar package definition file (&ltvendor&gt.txt). That is the sort of info we need. Don't worry about the codes you see in there, just the basic info like descriptions and dependencies. That would allow us to make this file. You can deliver the whole file if you want to, but we can also maintain it.
<li>Provide an image for each package you deliver and one for your company (vendor). The target size would be around 100x100 for the product logo and 16x16 for the vendor logo.
<li>Make sure every package contains a file:
&ltOpendTect version&gt/relinfo/ver.&ltpackage_name&gt[_plf].txt
Like:<br>
<code>@OpendTect_VERSION_MAJOR@.@OpendTect_VERSION_MINOR@.0/relinfo/ver.jimsinversion_lux64.txt</code><br>
<code>@OpendTect_VERSION_MAJOR@.@OpendTect_VERSION_MINOR@.0/relinfo/ver.pppraytrace.txt</code><br>
</ul>
<p id="text">You can have your own version numbering, but it has to have this form:<br>
<code>number.number.number[optional_free_text_without_dots_starting_with_non_digit]</code><br>
You are completely free in your numbering, and the optional text. The installer uses the '<code>&gt;</code>' operator for every part. The numbers have to be integer numbers, and will be compared as integers.
</p><p id="text">
Users cannot update a packages without also updating the packages that these are dependent on. This circumvents the need to specify exactly the dependencies on which versions on what other packages.
</p>

<br>

<p>
<center>
  <a href="index.html">Index</a>
| <a href="overview.html">Overview</a>
| <a href="rules.html">Rules</a>
| <a href="attributes.html">Attributes</a>
| <a href="unix.html">UNIX</a>
| <a href="windows.html">MS Windows</a>
| <a href="http://www.opendtect.org">opendtect.org</a>
</center>
</p>


</td></tr>

                         </font>
			                         </tbody>
			 </table>
			         </div>
			 <div id="footer">
			 </div>
			 </div>
		 </div>
	 </div>
 </div>
 </body>
 </html>

