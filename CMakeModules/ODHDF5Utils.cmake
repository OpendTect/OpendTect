#_______________________Pmake___________________________________________________
#
#       CopyRight:	dGB Beheer B.V.
#       July 2018	Bert/Arnaud
#_______________________________________________________________________________

macro( HDF5CLEANUP )
  unset( HDF5_DIFF_EXECUTABLE CACHE )
  unset( HDF5_DIR CACHE )
  unset( HDF5_IS_PARALLEL CACHE )
  unset( HDF5_USE_STATIC_LIBRARIES CACHE )
  list(APPEND COMPS C CXX )
  list(APPEND LIBSUFFIXES dl hdf5 hdf5_cpp m pthread z)
  foreach( COMP IN LISTS COMPS )
    unset( HDF5_${COMP}_COMPILER_EXECUTABLE CACHE )
    unset( HDF5_${COMP}_COMPILER_NO_INTERROGATE CACHE )
    unset( HDF5_${COMP}_INCLUDE_DIR CACHE )
    foreach( LIBSUFFIX IN LISTS LIBSUFFIXES )
      unset( HDF5_${COMP}_LIBRARY_${LIBSUFFIX} CACHE )
      unset( HDF5_${LIBSUFFIX}_LIBRARY_DEBUG CACHE )
      unset( HDF5_${LIBSUFFIX}_LIBRARY_RELEASE CACHE )
    endforeach()
  endforeach()
endmacro( HDF5CLEANUP )

macro( CHECKTARGETTYPE TARGETNAME )
  if(TARGET ${TARGETNAME})
    set( LIBISTARGET TRUE )
  else()
    set( LIBISTARGET FALSE )
  endif()
endmacro()

macro( GETHDF5COMPDEF )
  CHECKTARGETTYPE(${HDF5_CXX_SHARED_LIBRARY})
  if ( LIBISTARGET )
    get_target_property( HDF5_COMPILEDEF ${HDF5_CXX_SHARED_LIBRARY} INTERFACE_COMPILE_DEFINITIONS )
  endif()
  if ( NOT DEFINED HDF5_COMPILEDEF OR NOT HDF5_COMPILEDEF )
    set( HDF5_COMPILEDEF "H5_BUILT_AS_DYNAMIC_LIB" )
  endif()
endmacro( GETHDF5COMPDEF )

macro( GET_HDF5_ROOT )
  if ( HDF5_DIFF_EXECUTABLE )
    get_filename_component( hdf5_path ${HDF5_DIFF_EXECUTABLE} DIRECTORY )
    get_filename_component( hdf5_path ${hdf5_path} DIRECTORY )
  elseif ( HDF5_INCLUDE_DIRS OR HDF5_INCLUDE_DIR OR HDF5_C_INCLUDE_DIR )
    if ( HDF5_C_INCLUDE_DIR )
	get_filename_component( hdf5_path ${HDF5_C_INCLUDE_DIR} DIRECTORY )
    elseif( HDF5_INCLUDE_DIR )
	list(GET HDF5_INCLUDE_DIR 0 HDF5_FIRST_INCLUDE_DIR )
	get_filename_component( hdf5_path ${HDF5_FIRST_INCLUDE_DIR} DIRECTORY )
    else()
	list(GET HDF5_INCLUDE_DIRS 0 HDF5_FIRST_INCLUDE_DIR )
	get_filename_component( hdf5_path ${HDF5_FIRST_INCLUDE_DIR} DIRECTORY )
    endif()
  elseif( WIN32 )
    set( hdf5_path "" )
  else()
    set( hdf5_path "/usr" )
  endif()
endmacro()

macro( SETHDF5DIR )
  if ( DEFINED HDF5_ROOT )
    if ( EXISTS "${HDF5_ROOT}/cmake/hdf5" )
      set( HDF5_DIR "${HDF5_ROOT}/cmake/hdf5" )
    elseif( EXISTS "${HDF5_ROOT}/share/cmake/hdf5" )
      set( HDF5_DIR "${HDF5_ROOT}/share/cmake/hdf5" )
    endif()
  endif()
endmacro()

macro( OD_FIND_HDF5 )

  if ( NOT DEFINED HDF5_ROOT )
    set( HDF5_ROOT "" CACHE PATH "HDF5 Location" )
    HDF5CLEANUP()
  elseif ( DEFINED HDF5_DIFF_EXECUTABLE OR DEFINED HDF5_C_INCLUDE_DIR OR DEFINED HDF5_INCLUDE_DIRS )
    GET_HDF5_ROOT()
    if ( "${HDF5_ROOT}" STREQUAL "" )
      set( HDF5_ROOT "${hdf5_path}" CACHE PATH "HDF5 Location" FORCE )
      set( HDF5_FOUND TRUE )
    elseif ( NOT "${HDF5_ROOT}" STREQUAL "${hdf5_path}" )
      HDF5CLEANUP()
    endif()
  endif()

  if ( NOT HDF5_FOUND )
    SETHDF5DIR()
    set( HDF5_USE_STATIC_LIBRARIES False )
    find_package( HDF5 QUIET NAMES hdf5 COMPONENTS C CXX shared )
    if ( NOT HDF5_FOUND )
	find_package( HDF5 QUIET COMPONENTS C CXX )
	if ( "${HDF5_CXX_LIBRARIES}" STREQUAL "" )
	    unset( HDF5_FOUND )
	elseif ( UNIX AND NOT APPLE )
	    if ( NOT HDF5_C_SHARED_LIBRARY AND HDF5_C_LIBRARIES )
		set( HDF5_C_SHARED_LIBRARY "${HDF5_C_LIBRARIES}" )
	    endif()
	    if ( NOT HDF5_CXX_SHARED_LIBRARY AND HDF5_CXX_LIBRARIES )
		list( REMOVE_ITEM HDF5_CXX_LIBRARIES "${HDF5_C_LIBRARIES}" )
		set( HDF5_CXX_SHARED_LIBRARY "${HDF5_CXX_LIBRARIES}" )
	    endif()
	endif()
    endif()
    if ( HDF5_FOUND )
      GET_HDF5_ROOT()
      set( HDF5_ROOT "${hdf5_path}" CACHE PATH "HDF5 Location" FORCE )
      if ( NOT HDF5_DIR )
	SETHDF5DIR()
        HDF5CLEANUP()
	UNSET( HDF5_FOUND )
	find_package( HDF5 QUIET NAMES hdf5 COMPONENTS C CXX shared )
	if ( NOT HDF5_FOUND )
	    find_package( HDF5 QUIET COMPONENTS C CXX )
	    if ( "${HDF5_CXX_LIBRARIES}" STREQUAL "" )
		unset( HDF5_FOUND )
	    endif()
	endif()
      endif()
    else()
      HDF5CLEANUP()
      unset( HDF5_ROOT CACHE )
      set( HDF5_ROOT "" CACHE PATH "HDF5 Location" )
    endif()
    if ( NOT HDF5_DIR )
      unset( HDF5_DIR CACHE )
    endif()
  endif()

endmacro( OD_FIND_HDF5 )

macro( OD_GET_LINKLIBS )
    if( NOT HDF5_CXX_SHARED_LIBRARY AND HDF5_CXX_LIBRARY_hdf5_cpp )
	set( HDF5_CXX_SHARED_LIBRARY ${HDF5_CXX_LIBRARY_hdf5_cpp} )
    endif()
    if( NOT HDF5_C_SHARED_LIBRARY AND HDF5_CXX_LIBRARY_hdf5 )
	set( HDF5_C_SHARED_LIBRARY ${HDF5_CXX_LIBRARY_hdf5} )
    endif()
endmacro(OD_GET_LINKLIBS)

macro( OD_SETUP_HDF5 )

    if ( OD_USEHDF5 )
	if ( DEFINED HDF5_INCLUDE_DIR )
	    list ( APPEND OD_MODULE_INCLUDESYSPATH ${HDF5_INCLUDE_DIR} )
	    OD_GET_LINKLIBS()
	    list ( APPEND OD_MODULE_EXTERNAL_LIBS
		    ${HDF5_C_SHARED_LIBRARY}
		    ${HDF5_CXX_SHARED_LIBRARY} )

	    if ( WIN32 )
	        GETHDF5COMPDEF()
	        add_definitions( -D${HDF5_COMPILEDEF} )
	        if ( HDF5_VERSION VERSION_GREATER_EQUAL 1.12 )
		    set( CMAKE_CXX_FLAGS "/wd4268 ${CMAKE_CXX_FLAGS}" )
	        endif()
	    endif()
	endif()
    endif( OD_USEHDF5 )

endmacro( OD_SETUP_HDF5 )
