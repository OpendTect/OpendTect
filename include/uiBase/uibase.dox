/*+
________________________________________________________________________

 (C) dGB Beheer B.V.; (LICENSE) http://opendtect.org/OpendTect_license.txt
 Author:	Nanne Hemstra
 Date:		September 2012
 SVN:		$Id$
________________________________________________________________________

-*/


/*!
\defgroup uiBase uiBase
\brief Basic User Interface
\section uibase_intro Introduction Basic User Interface

This module is a set of cooperating classes that enable creating User
Interfaces. This layer on top of the already wonderful Qt package was created
because of the following problems:

- Qt provides an enormous set of tools, of which we need only a fraction
- On the other hand, Qt does not offer things like:
   - Selection of widget on basis of data characteristics
   - Automated 'black-box' layouting (enabling full grouping into new classes)
   - Integration with our data types
   - Generalised Callback/Notifier support (instead of Qt's Signal/Slot)
- If we use Qt directly, no isolation is present.

Therefore, as with most external libraries, we chose to make a new layer to
combine the power of Qt with the flexibility of more generalised design
principles.


\section Usage

The basic principles are:
- Objects are linked to each other in the window by attaching. This determines
  the layout of the window.
- Events are notified by specifically asking a Notifier in the class.
- All objects can be grouped; every group must be prepared to be attached to
  other UI elements; this is done by assigning one of the objects as being
  the 'align object'.
- 'Simple' data input should preferably be done through the uiGenInput
  class (see uiTools module).

The Qt window painting facilities are only used for quick sketching, the
code generation capacity is not used. Example:

<code>
    IntInpSpec spec( lastnrclasses );<br>
    spec.setLimits( Interval<int>( 0, 100 ) );<br>
    nrclassfld = new uiGenInput( this, "Number of classes", spec );<br>
<br>
    FloatInpSpec inpspec( lastratiotst*100 );<br>
    inpspec.setLimits( Interval<float>( 0, 100 ) );<br>
    perctstfld = new uiGenInput( this, "Percentage used for test set",
	    				inpspec );<br>
    perctstfld->attach( alignedBelow, nrclassfld );<br>
    <br>
    defbut = new uiPushButton( this, "Default" ); <br>
    defbut->activated.notify( mCB(this,ThisClass,setPercToDefault) ); <br>
    defbut->attach( rightOf, perctstfld );
</code>

Note that all objects could have been made:
- Conditional (only if a condition is met)
- Iterative (any number that may be necessary)
- As part of a group (e.g. to later treat as one uiObject)
- From a Factory (for example an object transforming a string into a uiObject).


\section Design

In the uiBase directory, you'll find classes that directly communicate with Qt
to implement (parts of) this strategy. To keep the header files uncoupled
from the Qt header files, there is a mechanism where the 'ui' class has a
'ui'-Body class that is a subclass of a Qt class.

Almost every 'visible' object is a uiObject. Besides the different subclasses,
there is also the uiGroup which is just another uiObject. The windows holding
these are (like uiObjects) uiBaseObject's. The uiMainWin is a subclass, and
the ubiquitous uiDialog.

*/
